#class gps open;
load gps_actions;

@stackcreate{gt};
#al gt gps.gt;

#var gps_path_index 0;
#var gps_path_size 0;

#var GPS_TRAVERSE_DELAY 0.8;
#var GPS_GT_DELAY 0.5;

#al {on_there} {
    #al on_there_${dst_roomno} %0;
};

#al {gps.gt.check} {
    gt.stop;
    #var gps_stop 0;
    #var dst_roomno @stacktop{gt};
    #al {gps_check_room_done} {
        #var src_roomno ${gps.roomno};
        #if {${src_roomno} == ${dst_roomno}} {
            gt.stop;
            #var tmp @stackpop{gt};
            #delay {1} {
                #showme {GPS: 抵达目的地};
                on_there_${dst_roomno};
            };
        };
        #else {
            #if {${gps_stop} == 0} {
                #delay {1} {
                    random_walk {
                        gps.retry;
                    };
                };
            };
        };
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al gt.stop gps.gt.stop;
#al {gps.gt.stop} {
    #var gps.run.mode nil;
    gps.stop;
};
#al {gps.stop} {
    #var gps_stop 1;
    #class gps.action.inner kill;
    #undelay {there_delay};
    #undelay {gps_delay};
    #unticker {gps_ticker};
    #al tmp_get_pos #cr;
    set brief 2;
};

#al {gps.retry} {
    #var tmp @stackpop{gt};
    #if {"${tmp}" == "nil"} {
        gps.run;
    };
    #else {
        gps.gt $tmp;
    };
};

#al {gps.gt} {
    #var gps_stop 0;
    #var gps_gt_dest %1;
    #replace gps_gt_dest ( \(;
    #replace gps_gt_dest ) \);
    
    #if {@isdigit{${gps_gt_dest}}} {
        #var dst_roomno ${gps_gt_dest};
    };
    #else {
        INVOKE gps.get_room ${gps_gt_dest};
        #var dst_roomno ${gps.roomno};
    };

    @stackpush{gt;${dst_roomno}};
    #al {gps_check_room_done} {
        #var src_roomno ${gps.roomno};
        #var dst_roomno @stacktop{gt};
        
        #if {${gps.roomno} == -1 && ${gps_stop} == 0} {
            #delay {1} {
                #showme {GPS: 当前房间未记录, 无法行走};
                random_walk {
                    gps.retry;
                };
            };
        };
        #else {
            #if {${dst_roomno} == ${src_roomno}} {
                gt.stop;
                #var tmp @stackpop{gt};
                #delay {1} {
                    #showme {GPS: 抵达目的地};
                    on_there_${dst_roomno};
                };
            };
            #else {
                #format {epoch_from} {%T};
                #showme {GPS: 正在寻路: ${src_roomno} -> ${dst_roomno}};
                gps.get_path ${src_roomno} ${dst_roomno};
                #format {epoch_to} {%T};
                #showme {GPS: 完成寻路, 耗时: @eval{$epoch_to-$epoch_from} 秒};
                #var gps_path_index 1;
                #list gps_path size gps_path_size;
                #if {${gps_path_size} == 0} {
                    #var tmp @stackpop{gt};
                    #delay {1} {
                        show_to_info GPS: 目标房间不可达, 无法行走: ${gps_gt_dest};
                    };
                };
                #else {
                    #var gps.run.mode NORMAL;
                    set brief 1;
                    gps.run;
                };
            };
        };
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {on_reachable} {
    #al tmp_there #cr;
    #al tmp_there %0;
    #ac {GPS: 目标房间可达} {
        #unac {GPS: 目标房间可达};
        on_unbusy {
            tmp_there;
        };
    };
};

#al {on_unreachable} {
    #al tmp_not_there #cr;
    #al tmp_not_there %0;
    #ac {GPS: 目标房间不可达} {
        #unac {GPS: 目标房间不可达};
        on_unbusy {
            tmp_not_there;
        };
    };
};

#al {gps.check} {
    #var gps_stop 0;
    #var gps_gt_dest %1;
    #replace gps_gt_dest ( \(;
    #replace gps_gt_dest ) \);

    #al {gps_check_room_done} {
        #var src_roomno ${gps.roomno};
        #if {${gps.roomno} == -1} {
            #showme GPS: 目标房间可达;
        };
        #else {
            #if {@isdigit{${gps_gt_dest}}} {
                #var dst_roomno ${gps_gt_dest};
            };
            #else {
                INVOKE gps.get_room ${gps_gt_dest};
                #var dst_roomno ${gps.roomno};
            };

            #if {${dst_roomno} == ${src_roomno}} {
                #showme GPS: 目标房间可达;
            };
            #else {
                gps.get_path ${src_roomno} ${dst_roomno};
                #list gps_path size gps_path_size;
                #if {${gps_path_size} == 0} {
                    #showme GPS: 目标房间不可达;
                };
                #else {
                    #showme GPS: 目标房间可达;
                };
            };
        };
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {gps.run_maze} {
    #var gps_maze %0;
    #list gps_maze_list create ${gps_maze};
    #list gps_maze_list size gps_maze_size;
    #var gps_maze_index 1;
    gps.maze.run;
};

#al {gps.maze.run} {
    #if {${gps_stop} == 1} {
        #return;
    };
    #if {${gps_maze_index} > ${gps_maze_size}} {
        gps.run;
        #return;
    };
    #list gps_maze_list get ${gps_maze_index} gps_maze_next_step;
    #math gps_maze_index ${gps_maze_index}+1;
    ${gps_maze_next_step};
    #delay {${GPS_TRAVERSE_DELAY}} {
        gps.maze.run;
    };
};

#al {gps.run} {
    #var is_break 0;
    #var accu 0;
    #while {${gps_path_index} <= ${gps_path_size}} {
        #if {${gps_stop} == 1} {
            #var is_break 1;
            #break;
        };
        #if {"${gps.run.mode}" == "NORMAL"} {
            #math accu ${accu}+1;
        };
        #list gps_path get ${gps_path_index} gps_next_step;
        #math gps_path_index ${gps_path_index}+1;
        ${gps_next_step};
        #if {@startwith{${gps_next_step};gps} == 1} {
            #var is_break 1;
            #break;
        };
        #elseif {"${gps.run.mode}" == "TRAVERSE"} {
            gps.delay ${GPS_TRAVERSE_DELAY};
            #var is_break 1;
            #break;
        };
        #elseif {"${gps.run.mode}" == "NORMAL" && ${accu} > 5} {
            gps.delay ${GPS_GT_DELAY};
            #var is_break 1;
            #break;
        };
    };
    #if {${gps_path_index} > ${gps_path_size} && ${is_break} == 0} {
        set brief 2;
        #delay {gps_delay} {
            #if {"${gps.run.mode}" == "NORMAL"} {
                gps.gt.check;
            };
            #elseif {"${gps.run.mode}" == "TRAVERSE"} {
                bl.stop;
                #showme {GPS: 遍历完成};
                #unac {${gps_traverse_target}};
            };
        } {1};
    };
};

#al bl.continue gps.traverse.continue;
#al bl.start gps.traverse;
#al bl.stop gps.traverse.stop;

#var gps_stop 0;
#al {gps.traverse.continue} {
    #ac {${gps_traverse_target}} {
        #unac {${gps_traverse_target}};
        #showme 找到目标: ${gps_traverse_target};
        bl.stop;
    } {1};

    #var gps_stop 0;
    #var gps.run.mode TRAVERSE;
    set brief 1;
    gps.run;
};

#al {gps.traverse.stop} {
    #unac {${gps_traverse_target}};
    #var gps.run.mode nil;
    gps.stop;
};

#al {gps.traverse} {
    #unac {${gps_traverse_target}};
    gps.setup;
    #var gps_stop 0;
    #var mode nil;
    #var gps_traverse_target %1;
    #var mode %2;
    #var gps_traverse_location nil;

    #al {gps_traverse_retry} {
        gps.traverse {${gps_traverse_target}} ${mode};
    };
    
    #al {gps_check_room_done} {
        #ac {${gps_traverse_target}} {
            #unac {${gps_traverse_target}};
            #showme 找到目标: ${gps_traverse_target};
            bl.stop;
        } {1};

        #if {${gps.roomno} == -1} {
            #delay {gps_check_delay} {
                #showme {GPS: 当前房间未记录, 无法遍历};
                random_walk {
                    gps_traverse_retry;
                };
            } {1};
        };
        #else {
            INVOKE gps.traverse ${gps.roomno} ${gps_traverse_location} ${mode};
            #var gps_path_index 1;
            #list gps_path size gps_path_size;
            #var gps.run.mode TRAVERSE;
            set brief 1;
            #delay {gps_delay} {
                #if {${gps_stop} == 0} {
                    gps.run;
                };
            } {1};
        };
    };

    gps.check_room {
        gps_check_room_done;
    };
};

#var DEFAULT_GPS_WEIGHT "50,100,1";
#al {gps.fly.on} {
    #var DEFAULT_GPS_WEIGHT "50,10,1";
};

#al {gps.fly.off} {
    #var DEFAULT_GPS_WEIGHT "50,10,-1";
};

#al {gps.get_path} {
    #nop about type: 1. gps.clear 2. gps.delay 3. gps.fly
    #nop weight > 0: there is a weight;
    #nop weight = 0: there is no weight;
    #nop weight < 0: the path is disabled;
    
    INVOKE gps.get_path %1 %2 ${DEFAULT_GPS_WEIGHT};
};

#macro {\e[24~} { #nop ];
    gps.check_link;
};

#macro {\e[23~} { #nop ];
    gps.record;
};

#al {gps.check_room} {
    #al tmp_check_room #cr;
    #al tmp_check_room %0;
    #al {get_pos_done} {
        INVOKE gps.check_room "${pos.area}" "${pos.room}" "${pos.desc}" "${pos.exits}";
        tmp_check_room;
    };
    get_area {
        get_pos {
            get_pos_done;
        };
    };
};

#al {gps.check_or_insert_room} {
    #al {gps_check_room_done} {
        #if {${gps.roomno} == -1} {
            #show {GPS: 房间未记录};
            INVOKE gps.insert_room "${pos.room}" "${pos.desc}" "${pos.exits}" "${pos.area}";
        };

        #delay {1} {
            #show {GPS: ${pos.room}: ${gps.roomno}};            
        };

        #showme ROOM_INSERTED;
    };
    gps.check_room {
        gps_check_room_done;
    };
}

#al {gps.set_roomno} {
    #var roomno 0;
    #var roomno %1;
    #al {gps_check_room_done} {
        INVOKE gps.update_room ${roomno} "${pos.area}" "${pos.room}" "${pos.desc}" "${pos.exits}";
        gps.check_link;
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {gps.set_abbrev} {
    #var abbrev %1;
    #al {gps_check_room_done} {
        INVOKE gps.set_abbrev ${gps.roomno} "$abbrev";
        gps.check_link;
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {gps.set_zone} {
    #var zone %1;
    #al {gps_check_room_done} {
        INVOKE gps.set_zone ${gps.roomno} "$zone";
        gps.check_link;
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {gps.check_link} {
    #al {gps_check_room_done} {
        #delay {1} {
            #show {GPS: ${pos.room}: ${gps.roomno} ${gps.abbr}};
        };
        #if {${gps.roomno} == -1} {
            #delay {1} {
                #show {GPS: 房间未记录, 无法检查连接};
            };
        };
        #else {
            INVOKE gps.check_link ${gps.roomno};
        };
    };
    gps.check_room {
        gps_check_room_done;
    };
};

#al {gps.insert_link} {
    #var room_no %1;
    #var target_room_no %2;
    #var direction %3;
    #var reverse_direction %4;

    INVOKE gps.insert_link ${room_no} ${target_room_no} "${direction}" "${reverse_direction}"
};

#al {gps.record} {
    #var lookaround_type 0;
    #class gps.record open;
    #ac {ROOM_INSERTED} {
        #if {${lookaround_type} == 0} {
            do_lookaround;
        };
        #elseif {${lookaround_type} == 1} {
            INVOKE gps.insert_link ${lookaround_room_no} ${gps.roomno} "${lookaround_exit}" "${reverse_direction}";
            #var lookaround_type 0;
            walk ${reverse_direction};
        };
    };

    #ac {ROOM_CHANGED} {
        #if {${lookaround_type} == 0} {
            look_next;
        };
        #elseif {${lookaround_type} == 1} {
            gps.check_or_insert_room;
        };
    };

    #ac {ROOM_NOT_CHANGED} {
        #if {${lookaround_type} == 1} {
            look_next;
        };
        #elseif {${lookaround_type} == 0} {
            finish_record;
        };
    };
    
    #class gps.record close;
    #al {finish_record} {
        #class gps.record kill;
        gps.check_link;
    };
    #al {look_next} {
        #math lookaround_exit_index ${lookaround_exit_index}+1;
        #if {${lookaround_exit_index} > ${lookaround_exit_size}} {
            finish_record;
        };
        #else {
            #list lookaround_exits get ${lookaround_exit_index} lookaround_exit;
            #var reverse_direction @opposite{${lookaround_exit}};
            #var lookaround_type 1;
            walk ${lookaround_exit};
        };
    };

    #al {do_lookaround} {
        #list lookaround_exits create ${pos.exits};
        #var lookaround_room_no ${gps.roomno};

        #var lookaround_exit_index 0;
        #list lookaround_exits size lookaround_exit_size;
        
        look_next;
    };

    gps.check_or_insert_room;
};

#al {gps.record_zone} {
    #var zone %1;
    #var lookaround_type 0;
    #class gps.record open;
    #ac {ROOM_INSERTED} {
        INVOKE gps.set_zone ${gps.roomno} ${zone};
        #if {${lookaround_type} == 0} {
            do_lookaround;
        };
        #elseif {${lookaround_type} == 1} {
            #var lookaround_type 0;
            walk ${reverse_direction};
        };
    };

    #ac {ROOM_CHANGED} {
        #if {${lookaround_type} == 0} {
            look_next;
        };
        #elseif {${lookaround_type} == 1} {
            gps.check_or_insert_room;
        };
    };

    #ac {ROOM_NOT_CHANGED} {
        #if {${lookaround_type} == 1} {
            look_next;
        };
        #elseif {${lookaround_type} == 0} {
            finish_record;
        };
    };
    
    #class gps.record close;
    #al {finish_record} {
        #class gps.record kill;
        gps.check_link;
    };
    #al {look_next} {
        #math lookaround_exit_index ${lookaround_exit_index}+1;
        #if {${lookaround_exit_index} > ${lookaround_exit_size}} {
            finish_record;
        };
        #else {
            #list lookaround_exits get ${lookaround_exit_index} lookaround_exit;
            #var reverse_direction @opposite{${lookaround_exit}};
            #var lookaround_type 1;
            walk ${lookaround_exit};
        };
    };

    #al {do_lookaround} {
        #list lookaround_exits create ${pos.exits};

        #var lookaround_exit_index 0;
        #list lookaround_exits size lookaround_exit_size;
        
        look_next;
    };
 
    gps.check_or_insert_room;
};

#al {get_area} {
    #al tmp_get_area #cr;
    #al tmp_get_area %0;
    #var pos.area {};
    #class record.inner open;
    
    #ac {【西游记】－－%S} {
        #class record.inner kill;
        #undelay get_area_delay;        
        #var pos.area %%1;
        tmp_get_area;
    };
    #ac {【西游记】──%S} {
        #class record.inner kill;
        #undelay get_area_delay;        
        #var pos.area %%1;
        tmp_get_area;
    };
    #ac {找不到当前地区的地图！} {
        #class record.inner kill;
        #undelay get_area_delay;
        #var pos.area {};
        tmp_get_area;
    };
    #ac {这里暂时没有地图。} {
        #class record.inner kill;
        #undelay get_area_delay;
        #var pos.area {};
        tmp_get_area;
    };
    #ac {^〖%*〗} {
        #class record.inner kill;
        #undelay get_area_delay;        
        #var pos.area %%1;
        tmp_get_area;
    };
    #ac {^［%*］} {
        #class record.inner kill;
        #undelay get_area_delay;
        #var pos.area %%1;
        tmp_get_area;
    };

    #ac {^[输入时暂存讯息]} {
        #cr
    } {4};
    
    #ac {^[%*]} {
        #class record.inner kill;
        #undelay get_area_delay;
        #var pos.area %%1;
        tmp_get_area;
    };
    #ac {q 离开} {
        #send {q};
    };

    #delay get_area_delay {
        #class record.inner kill;
        #var pos.area {};
        tmp_get_area;
    } {1.5};
    #class record.inner close;
    map;#send {q};
};

#al {get_pos} {
    #al tmp_get_pos #cr;
    #al tmp_get_pos %0;
    #var record_state 0;
    #var current_room {};
    #var description {};
    #var exits_list  {};
    #class record.inner open;
    #ac {^%* - $} {
        #var record_state 1;
        #var current_room %%1;
        #if {"${current_room}" == "囚洞"} {
            get_exits_done;
        };
        #if {"${current_room}" == "混沌之初"} {
            get_exits_done;
        };
    } {1};
    
    #ac {    「%*」: %*} {
        #delay {look_delay} {
            get_exits_done;
        } {1};
    } {6};

    #ac {这里没有任何明显的出路。} {
        #var exits_list  {};
        get_exits_done;
    } {7};

    #ac {这里唯一的出口是 %w。} {
        #var exits_list  {%%1;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w 和 %w。} {
        #var exits_list {%%1;%%2;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;%%5;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w、%w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;%%5;%%6;};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w、%w、%w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;%%5;%%6;%%7;};
        get_exits_done;
    } {7};


    #ac {这里明显的出口是 %w、%w、%w、%w、%w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;%%5;%%6;%%7;%%8};
        get_exits_done;
    } {7};

    #ac {这里明显的出口是 %w、%w、%w、%w、%w、%w、%w、%w 和 %w。} {
        #var exits_list {%%1;%%2;%%3;%%4;%%5;%%6;%%7;%%8;%%9};
        get_exits_done;
    } {7};

    #al {get_exits_done} {
        #var pos.room ${current_room};
        #replace {description} { } {};
        #replace {description} {	} {};
        #var pos.desc ${description};
        #var pos.exits ${exits_list};
        #class record.inner kill;
        #undelay {look_delay};
        tmp_get_pos;
    };

    #ac {^    %S。} {
        #cr
    } {8};
    
    #ac {^%S%*} {
        #if {$record_state == 1} {
            #var description ${description}%%1%%2;
        };
    } {9};

    #ti {ticker_get_position_look} {
        #send {l};
        #send {ok};
    } {5};
    #class record.inner close;
    #send {l};
};

#al {do_random_walk} {
    #al {get_pos_done} {
        #list exits_list create ${pos.exits};
        #list exits_list size tmp_exit_list_size;
        #if {${tmp_exit_list_size} == 0} {
            #cr;
        };
        #var tmp_exit_index @random{${tmp_exit_list_size}};
        #list exits_list get  ${tmp_exit_index} exit;
        #delay {1} {
            walk ${exit};            
        };
    };
    get_pos {
        get_pos_done;
    };    
};

#al {random_walk.stop} {
    #class random_walk kill;  
};

#al {random_walk.start} {
    #class random_walk open;
    #ac {ROOM_CHANGED} {
        do_random_walk;
    };
    #ac {ROOM_NOT_CHANGED} {
        do_random_walk;
    };
    #class random_walk close;
    do_random_walk;
};

#al {random_walk} {
    #al tmp_random_walk #cr;
    #al tmp_random_walk %0;
    
    #class random_walk open;
    #ac {ROOM_CHANGED} {
        tmp_random_walk;
    };
    #ac {ROOM_NOT_CHANGED} {
        tmp_random_walk;
    };
    #class random_walk close;
    
    do_random_walk;
};

#al {gps.insert_room} {
    #al {get_pos_done} {
        INVOKE gps.insert_room "${pos.room}" "${pos.desc}" "${pos.exits}" "${pos.area}";
        #delay {1} {
            #echo {GPS: ${pos.room}: ${gps.roomno}};            
        };
    };
    get_area {
        get_pos {
            get_pos_done;
        };
    };
};
#class gps close;
